# Generated by Django 4.2.11 on 2024-06-19 17:15
from datetime import datetime, timedelta
from django.db import migrations

from apps.events.models import EventAction, EventActionType, ScheduledMessage
from apps.experiments.models import ExperimentSession

def is_complete(task):
	return datetime.now() > task.expires

def calculate_next_run(task, current_time, is_complete):
	if is_complete:
		return None
	delta = timedelta(seconds=task.interval.every.total_seconds())
	next_time = task.start_time
	while next_time <= current_time:
		next_time += delta
	return next_time

def calculate_last_run(task, current_time, is_complete):
	if is_complete:
		return task.expires
	delta = timedelta(seconds=task.interval.every.total_seconds())
	last_time = task.start_time
	while last_time <= datetime.now():
		last_time += delta
	return last_time - delta


class Migration(migrations.Migration):
    def migrate_periodic_tasks(apps, schema_editor):
        PeriodicTask = apps.get_model('django_celery_beat', 'PeriodicTask')
        for periodic_task in PeriodicTask.objects.filter(name__startswith="reminder-"):
            parts = periodic_task.name.split("-")
            if len(parts) >= 3:
                experiment_session_id = parts[1]
                experiment_session = ExperimentSession.objects.get(id=experiment_session_id)
                params = {
                    "time_period": periodic_task.kwargs.get("time_period", "day"),
                    "frequency": periodic_task.kwargs.get("frequency", 1),
                    "repetitions": periodic_task.kwargs.get("repetitions", 1),
                }
                action=EventAction.objects.create(action_type=EventActionType.SCHEDULETRIGGER),
                current_time = datetime.now()
                task_complete = current_time > periodic_task.expires
                ScheduledMessage.objects.create(
                    experiment_id=experiment_session.experiment.id,
                    action=action,
                    participant_id=periodic_task.chat_ids[0],
                    prompt_text=periodic_task.message,
                    next_trigger_date=calculate_next_run(periodic_task, current_time, task_complete),
                    last_triggered_at=calculate_last_run(periodic_task, current_time, task_complete),
                    total_triggers=0,
                    is_complete=task_complete,
                    custom_schedule_params={},
                )
    dependencies = [
        ('events', '0010_alter_eventaction_action_type'),
    ]

    operations = [
        migrations.RunPython(migrate_periodic_tasks),
    ]
