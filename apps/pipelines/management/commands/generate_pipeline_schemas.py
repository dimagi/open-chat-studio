import inspect
import json

from django.conf import settings
from django.core.management import BaseCommand
from jinja2 import Environment

from apps.pipelines.nodes import nodes

INDEX_TEMPLATE = """
/**
* This file and all schema files were automatically generated by generate_pipeline_schemas.
* DO NOT MODIFY IT BY HAND. Instead, modify the pipeline node classes in Python,
* and run generate_pipeline_schemas to regenerate this file.
*/
{%- for node in nodes -%}
import {{node}} from "../schemas/{{node}}.json"
{% endfor %}

export const NodeTypeSchemas: Record<string, any> = {
    {%- for node in nodes %}
    {{node}}: {{node}},
    {%- endfor %}
};
"""


class Command(BaseCommand):
    help = "Generate JSON schemas for pipeline nodes which are used for validation in the frontend."

    def handle(self, *args, **options):
        node_classes = [
            cls
            for _, cls in inspect.getmembers(nodes, inspect.isclass)
            if issubclass(cls, nodes.PipelineNode) and cls != nodes.PipelineNode
        ]

        base_dir = settings.BASE_DIR / "assets" / "javascript" / "apps" / "pipeline" / "schemas"
        for n in node_classes:
            with open(base_dir / f"{n.__name__}.json", "w") as f:
                json.dump(n.model_json_schema(), f, indent=2)

        print(f"Generated {len(node_classes)} schemas in {base_dir}")

        node_names = [cls.__name__ for cls in node_classes]
        template = Environment().from_string(INDEX_TEMPLATE)
        result = template.render(nodes=node_names)
        with open(base_dir / "index.ts", "w") as f:
            f.write(result)
