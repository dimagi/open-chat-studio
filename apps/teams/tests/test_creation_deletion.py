import pytest
from django.test import override_settings
from django.urls import reverse
from field_audit.models import AuditEvent

from apps.teams.backends import SUPER_ADMIN_GROUP
from apps.teams.helpers import create_default_team_for_user
from apps.teams.models import Membership, Team
from apps.users.models import CustomUser
from apps.utils.factories.user import UserFactory


@pytest.mark.django_db()
def test_create_for_user():
    email = "alice@example.com"
    user = CustomUser.objects.create(
        username=email,
        email=email,
    )
    team = create_default_team_for_user(user)
    assert "Alice" == team.name
    assert "alice" == team.slug
    membership = team.membership_set.filter(user=user).first()
    assert membership.is_team_admin()
    assert [SUPER_ADMIN_GROUP] == [group.name for group in membership.groups.all()]


@pytest.mark.django_db()
def test_slug_generation_on_team_creation(client):
    """Test to verify that the slug is autogenerated when creating a team"""
    user = UserFactory()
    client.force_login(user)

    client.post(reverse("teams:create_team"), {"name": "Foo"})
    created_team = Team.objects.get(name="Foo")
    assert created_team is not None
    assert created_team.slug is not None
    assert created_team.slug != ""


@pytest.mark.django_db()
def test_slug_unchanged_on_team_name_update(client):
    user = UserFactory()
    client.force_login(user)

    client.post(reverse("teams:create_team"), {"name": "Foo"})
    team = Team.objects.get(name="Foo")
    assert team.slug == "foo"

    client.post(reverse("single_team:manage_team", args=[team.slug]), {"name": "Bar"})

    # Changing the name should not change the slug
    team.refresh_from_db()
    assert team.name == "Bar"
    assert team.slug == "foo"


@pytest.mark.django_db()
def test_group_owner_assignment_on_team_creation(client):
    """Test to make sure that user is assigned as group owner when they create a team"""
    user = UserFactory()
    client.force_login(user)

    client.post(reverse("teams:create_team"), {"name": "Bar"})
    created_team = Team.objects.get(name="Bar")

    membership = Membership.objects.filter(team__slug=created_team.slug).first()
    permission_group = membership.groups.first()
    assert permission_group.name == SUPER_ADMIN_GROUP


@pytest.mark.django_db()
@override_settings(CELERY_TASK_ALWAYS_EAGER=True)
def test_delete_team(client, team_with_users):
    client.force_login(team_with_users.members.first())
    response = client.post(reverse("single_team:delete_team", args=[team_with_users.slug]))
    assert response.status_code == 302
    assert not Team.objects.filter(slug=team_with_users.slug).exists()

    audit_events = AuditEvent.objects.by_model(Team).filter(object_pk=team_with_users.id).order_by("event_date")
    assert len(audit_events) == 2
    assert audit_events[0].is_create
    assert audit_events[1].is_delete

    # make sure there are audit events for related models
    assert AuditEvent.objects.by_model(Membership).filter(is_delete=True).count() == 2

    # make sure that all events have the same transaction ID
    transaction_ids = {
        context["transaction_id"]
        for context in AuditEvent.objects.filter(is_delete=True).values_list("change_context", flat=True)
    }
    assert len(transaction_ids) == 1
    assert all(transaction_id is not None for transaction_id in transaction_ids)
