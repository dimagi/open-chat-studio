{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Open Chat Studio Developer Documentation","text":"<p>Welcome to the Open Chat Studio developer documentation. This guide is designed to help you understand the architecture, setup your development environment, and contribute to the project effectively.</p>"},{"location":"#what-is-open-chat-studio","title":"What is Open Chat Studio?","text":"<p>Open Chat Studio is a platform for building, deploying, and evaluating AI-powered chat experiences. It provides tools for working with various LLMs (Language Learning Models), creating chatbots, managing conversations, and integrating with different messaging platforms.</p> <p>For user facing documentation, please visit docs.openchatstudio.com.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Create LLM-based based chatbots</li> <li>Create and manage conversational agents</li> <li>Connect to various messaging platforms</li> <li>Track and analyze conversations</li> <li>Customize conversation flows and logic</li> <li>Integrate with various service providers</li> </ul>"},{"location":"#documentation-sections","title":"Documentation Sections","text":"<ul> <li>Contributing: Guidelines for contributing to the project</li> <li>Getting Started: Setup your development environment</li> </ul>"},{"location":"admin_guides/","title":"Admin Guides","text":"<p>This section contains documentation for features that are typically used by system administrators and superusers to manage the Open Chat Studio platform.</p>"},{"location":"admin_guides/#available-guides","title":"Available Guides","text":"<ul> <li>Banners System - Create and manage system-wide notification banners</li> <li>Feature Flags - Manage access to feature flags</li> </ul>"},{"location":"admin_guides/#overview","title":"Overview","text":"<p>Admin features in Open Chat Studio are designed to help system administrators:</p> <ul> <li>Communicate important information to users</li> <li>Manage platform-wide settings and configurations</li> <li>Monitor and maintain system health</li> <li>Control feature availability and access</li> </ul> <p>Most admin features require superuser privileges and are accessible through the Django admin interface.</p>"},{"location":"admin_guides/banners/","title":"Banners System","text":"<p>The banners system allows system administrators to create and manage notification banners that appear to users throughout the Open Chat Studio platform.</p>"},{"location":"admin_guides/banners/#overview","title":"Overview","text":"<p>Banners are temporary notifications that can be displayed to users on specific pages or globally across the entire platform. They support different visual styles and can be scheduled to appear and disappear automatically.</p>"},{"location":"admin_guides/banners/#features","title":"Features","text":"<ul> <li>Multiple Banner Types: Information, warning, error, and success banners</li> <li>Location Targeting: Display banners on specific pages or globally</li> <li>Scheduling: Set start and end dates for automatic banner display</li> <li>Feature Flag Integration: Show banners only to teams with specific feature flags</li> <li>User Dismissal: Users can dismiss banners with optional re-appearance timeout</li> <li>Markdown Support: Banner messages support markdown formatting</li> <li>Template Variables: Dynamic content using Django template syntax</li> </ul>"},{"location":"admin_guides/banners/#creating-banners","title":"Creating Banners","text":""},{"location":"admin_guides/banners/#access-the-admin-interface","title":"Access the Admin Interface","text":"<ol> <li>Navigate to the Django admin interface (typically <code>/admin/</code>)</li> <li>Log in with superuser credentials</li> <li>Find the \"Banners\" section and click \"Banners\"</li> <li>Click \"Add banner\" to create a new banner</li> </ol>"},{"location":"admin_guides/banners/#banner-configuration","title":"Banner Configuration","text":""},{"location":"admin_guides/banners/#basic-information","title":"Basic Information","text":"<ul> <li>Title (optional): A brief title for the banner</li> <li>Message: The main content displayed to users (supports markdown)</li> <li>Banner Type: Choose the visual style:</li> <li><code>info</code> - Blue information banner</li> <li><code>warning</code> - Yellow warning banner  </li> <li><code>error</code> - Red error banner</li> <li><code>success</code> - Green success banner</li> </ul>"},{"location":"admin_guides/banners/#location-settings","title":"Location Settings","text":"<ul> <li>Location: Where the banner should appear:</li> <li><code>global</code> - All pages (default)</li> <li><code>experiments_home</code> - Experiments listing page</li> <li><code>experiments_new</code> - New experiment creation page</li> <li><code>pipelines</code> - Pipelines home page</li> <li><code>pipelines_new</code> - New pipeline creation page</li> <li><code>chatbots_home</code> - Chatbots listing page</li> <li><code>chatbots_new</code> - New chatbot creation page</li> <li><code>assistants_home</code> - Assistants listing page</li> <li><code>team_settings</code> - Team settings page</li> </ul>"},{"location":"admin_guides/banners/#scheduling","title":"Scheduling","text":"<ul> <li>Start Date: When the banner should first appear (defaults to current time)</li> <li>End Date: When the banner should stop appearing (required)</li> <li>Is Active: Manual toggle to enable/disable the banner</li> </ul>"},{"location":"admin_guides/banners/#advanced-options","title":"Advanced Options","text":"<ul> <li>Feature Flag: Only show the banner to teams that have this feature flag enabled</li> <li>Dismiss Timeout: Number of days before a dismissed banner reappears (0 = never reappear)</li> </ul>"},{"location":"admin_guides/banners/#banner-display-logic","title":"Banner Display Logic","text":""},{"location":"admin_guides/banners/#visibility-rules","title":"Visibility Rules","text":"<p>A banner is visible when ALL of the following conditions are met:</p> <ol> <li>The banner is marked as active (<code>is_active = True</code>)</li> <li>The current time is between the start and end dates</li> <li>The user hasn't dismissed the banner (or the dismiss timeout has expired)</li> <li>The banner location matches the current page (or is set to \"global\")</li> <li>If a feature flag is set, the user's team must have that flag enabled</li> </ol>"},{"location":"admin_guides/banners/#display-locations","title":"Display Locations","text":"<p>The banner location is determined by the <code>BannerLocationMiddleware</code> which maps URL patterns to banner locations:</p> <ul> <li>Global banners appear on all pages</li> <li>Location-specific banners only appear on their designated pages</li> <li>Multiple banners can be active simultaneously</li> </ul>"},{"location":"admin_guides/banners/#message-formatting","title":"Message Formatting","text":""},{"location":"admin_guides/banners/#markdown-support","title":"Markdown Support","text":"<p>Banner messages support standard markdown formatting:</p> <pre><code>**Bold text** and *italic text*\n[Links](https://example.com)\n- Bullet points\n- More bullets\n</code></pre>"},{"location":"admin_guides/banners/#template-variables","title":"Template Variables","text":"<p>You can use Django template variables in banner messages:</p> <pre><code>Welcome back, {{ request.user.first_name }}!\nCheck out this new feature: &lt;a href=\"{% url \"cool-feature\" request.team.slug %}\"&gt;GO!&lt;/a&gt;.\n</code></pre> <p>Note: Template errors are only shown to superusers for security reasons.</p>"},{"location":"admin_guides/banners/#user-interaction","title":"User Interaction","text":""},{"location":"admin_guides/banners/#dismissing-banners","title":"Dismissing Banners","text":"<p>Users can dismiss banners by clicking the dismiss button (\u00d7). When dismissed:</p> <ul> <li>A cookie is set to remember the dismissal</li> <li>The banner won't reappear until the dismiss timeout expires</li> <li>The cookie expires when the banner ends or after the timeout period</li> </ul>"},{"location":"admin_guides/banners/#dismiss-timeout-behavior","title":"Dismiss Timeout Behavior","text":"<ul> <li>0 days: Banner never reappears once dismissed</li> <li>N days: Banner reappears N days after dismissal</li> <li>Cookie expires at the earlier of: banner end date or dismiss timeout</li> </ul>"},{"location":"admin_guides/feature_flags/","title":"Feature Flags","text":"<p>Feature flags allow you to toggle features on/off for specific teams without code deployments. For technical details on how flags are created and used in code see the developer guide.</p> <p>Access to feature flags is managed via a custom page in OCS which is only accessible to users with the 'staff' or 'superuser' permission. Users with those permissions will see a 'Feature Flags' menu item at the bottom of the left side menu.</p> <p>Feature flags can be activated for:</p> <ul> <li>Everyone (all users)</li> <li>Superusers</li> <li>Specific teams</li> <li>Specific users</li> </ul> <p>If any of these matches for a user, they will have access to that feature flag.</p> <p>There are also two special modes:</p> <ul> <li>Testing mode</li> <li>This allows activating a flag using a URL parameter </li> <li>Rollout mode</li> <li>This allows activating a flag for a percentage of users. </li> </ul>"},{"location":"architecture/","title":"Architecture","text":"<p>This section provides an overview of the Open Chat Studio architecture, explaining the core concepts and components that make up the system.</p>"},{"location":"architecture/#system-overview","title":"System Overview","text":"<p>Open Chat Studio is built as a Django web application with a modular design. It consists of several Django apps that handle different aspects of the system.</p>"},{"location":"architecture/#technology-stack","title":"Technology Stack","text":"<ul> <li>Backend: Django, Django REST Framework, Celery</li> <li>Database: PostgreSQL</li> <li>Cache/Message Broker: Redis</li> <li>Frontend: HTML, CSS (Tailwind + DaisyUI), htmx, AlpineJS, ReactJS with React Flow (for specific components)</li> <li>External Services: OpenAI, Azure, etc.</li> </ul>"},{"location":"architecture/#key-concepts","title":"Key Concepts","text":""},{"location":"architecture/#experiments","title":"Experiments","text":"<p>Experiments are configurations for AI chat experiences. They include: - Prompts and LLM configurations - Channel connections - Data collection settings</p> <p>Note</p> <p>The term 'Experiments' is a legacy term. On the user interface side, they are referred to as 'Chatbots'.</p>"},{"location":"architecture/#channels","title":"Channels","text":"<p>Channels are communication interfaces that connect users to the chat system. These include: - Web chat - Slack - WhatsApp - Facebook Messenger - Custom integrations</p>"},{"location":"architecture/#service-providers","title":"Service Providers","text":"<p>Service providers enable integration with external services: - LLM providers (OpenAI, Azure, etc.) - Voice providers - Authentication providers - Messaging providers - Tracing providers</p>"},{"location":"architecture/#pipelines","title":"Pipelines","text":"<p>Pipelines allow for the creation of complex workflows with multiple nodes and processing steps.</p>"},{"location":"architecture/#project-structure","title":"Project structure","text":"<p>The project is organized into several Django apps, each responsible for a specific functionality. Apps are placed in the <code>apps</code> folder, and each app has its own models, views, serializers, and tests. </p>"},{"location":"architecture/#django-templates","title":"Django Templates","text":"<p>Templates as well as static files are centralized in the <code>templates</code> and <code>assets</code> folders, respectively. Templates specific to an app should be placed in the <code>templates/{app_name}</code> directory.</p>"},{"location":"architecture/#static-files","title":"Static Files","text":"<p>The <code>assets</code> folder contains JavaScript, CSS. The <code>assets/styles</code> folder contains Tailwind CSS configurations, while the <code>assets/javascript</code> folder contains JavaScript modules. These files are processed and bundled using Webpack to create the final static assets served to users. Other static assets like images are placed directly in the <code>static/</code> folder.</p>"},{"location":"architecture/#cross-cutting-concerns","title":"Cross-Cutting Concerns","text":""},{"location":"architecture/#background-tasks","title":"Background Tasks","text":"<p>Open Chat Studio uses Celery for asynchronous task processing, which is critical for handling LLM interactions, scheduled messages, and other background operations.</p> <p>Key Files:</p> <ul> <li><code>gpt_playground/celery.py</code>: Celery configuration</li> <li>Various <code>tasks.py</code> files in different apps</li> </ul>"},{"location":"architecture/#authentication-and-authorization","title":"Authentication and Authorization","text":"<p>The system uses Django's authentication system along with custom middleware and decorators to ensure proper access control.</p> <p>Key Files:</p> <ul> <li><code>teams/middleware.py</code>: Team-based access control</li> <li><code>teams/decorators.py</code>: Permission decorators</li> </ul>"},{"location":"architecture/#frontend-framework","title":"Frontend Framework","text":"<p>The frontend uses a combination of Django templates, Tailwind CSS, and JavaScript to create a responsive and interactive user interface.</p> <p>Key Files:</p> <ul> <li><code>templates/</code>: HTML templates</li> <li><code>assets/styles/</code>: CSS and Tailwind configurations</li> <li><code>assets/javascript/</code>: JavaScript modules</li> </ul>"},{"location":"architecture/#external-services","title":"External services","text":"<p>Sentry</p> <ul> <li>Purpose: Error reporting and tracking  </li> <li>Used for: Identifying and debugging production issues</li> </ul>"},{"location":"architecture/#task-badger","title":"Task Badger","text":"<ul> <li>Purpose: Celery task monitoring  </li> <li>Used for: Monitoring asynchronous task execution and performance</li> </ul> <p>BetterStack</p> <ul> <li>Purpose: Uptime monitoring and status page  </li> <li>Status Page: status.openchatstudio.com </li> <li>Used for: Monitoring system availability and communicating status to users</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Open Chat Studio! This guide will help you understand the contribution process and code style conventions.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<p>Before contributing, please make sure you've set up your development environment according to the Getting Started guide.</p>"},{"location":"contributing/#forms-of-contribution","title":"Forms of Contribution","text":""},{"location":"contributing/#provide-feedback","title":"Provide Feedback","text":"<ul> <li> <p>Report Bugs / Issues   If you encounter any issues or unexpected behavior in Open Chat Studio or its components, you can create a new issue in the GitHub issue tracker.</p> </li> <li> <p>Propose New Features / Improvements   If you have a suggestion for improving Open Chat Studio or want to share your ideas, you can open a new GitHub Discussion. If your idea is well-defined, you can also create a Feature Request Issue.   Provide a detailed description, including use cases, benefits, and potential challenges. Even if your idea is not immediately prioritized, it may still be considered later or taken up by the community.</p> </li> </ul>"},{"location":"contributing/#contribute-code-changes","title":"Contribute Code Changes","text":"<ul> <li>Fix Bugs or Develop New Features   If you want to help improve Open Chat Studio's codebase, choose an issue from the GitHub Issue Tracker and create a Pull Request addressing it. If you are new, check out the Good First Issues.</li> </ul> <p>Before starting, ensure that the change has not already been implemented. You can build Open Chat Studio using the latest <code>main</code> branch and confirm that the modification is still needed. If the feature is complex, discuss it first in the GitHub Discussions.</p>"},{"location":"contributing/#improve-documentation","title":"Improve Documentation","text":"<ul> <li>Developer Documentation needs improvement, and we welcome contributions.</li> <li>User Documentation is maintained in the open-chat-studio-docs repository and published at docs.openchatstudio.com.</li> <li>The easiest way to contribute to documentation is by reviewing and providing feedback. If you notice errors or opportunities for improvement, reach out to documentation contributors or create a Pull Request directly.</li> </ul>"},{"location":"contributing/#technical-guide","title":"Technical Guide","text":"<p>This section provides the necessary steps to set up your environment, build Open Chat Studio locally, and run tests.</p>"},{"location":"contributing/#1-set-up-your-environment","title":"1. Set Up Your Environment","text":"<p>Before contributing, please make sure you've set up your development environment according to the Getting Started guide.</p>"},{"location":"contributing/#2-start-working-on-your-first-issue","title":"2. Start Working on Your First Issue","text":"<p>To contribute, pick a task from the Good First Issues board. To be assigned to an issue, leave a comment with the <code>.take</code> command in the selected issue.</p>"},{"location":"contributing/#3-submit-a-pull-request-pr","title":"3. Submit a Pull Request (PR)","text":"<p>Follow our Pull Request guidelines.</p>"},{"location":"contributing/#agent-support","title":"Agent support","text":"<p>If you are using an agent other than Claude, consider creating a symbolic link to the CLAUDE.md file, but for your agent. For instance, to create a symlink for Gemini, run</p> <pre><code>ln -s CLAUDE.md GEMINI.md\n</code></pre> <p>Be sure add the new \"file\" to .gitignore.</p>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<p>If you have any questions or need assistance: - Use GitHub Discussions for general queries. - Check existing issues or open a new one if necessary. - Reach out to maintainers in GitHub if you need further guidance.</p>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Open Chat Studio, you agree that your contributions will be licensed under the terms stated in the LICENSE file.</p>"},{"location":"contributing/pull_requests/","title":"How to Prepare a Good Pull Request","text":"<p>Open Chat Studio is an open-source project, and you can contribute to its code directly. To do so, follow these guidelines for creating Pull Requests (PRs) to maximize the chances of your changes being merged.</p>"},{"location":"contributing/pull_requests/#general-rules-for-a-good-pull-request","title":"General Rules for a Good Pull Request","text":"<ul> <li>Fork the repository and use your fork to create PRs. Avoid creating change branches in the main repository.</li> <li>Choose an appropriate branch for your work and create your own branch based on it.</li> <li>Give your branches, commits, and Pull Requests meaningful names and descriptions. This helps track changes later. If your changes cover a particular component, indicate it in the PR name as a prefix, for example: <code>[DOCS] PR name</code>.</li> <li>Keep your PRs small\u2014each PR should address one issue. Remove all unrelated changes.</li> <li>Link your Pull Request to an issue if applicable.</li> <li>Document your contribution! If your changes impact how users interact with Open Chat Studio, update the relevant documentation. You can do this yourself or collaborate with documentation contributors.</li> <li>For Work In Progress or early test results, use a Draft PR.</li> </ul>"},{"location":"contributing/pull_requests/#ensure-change-quality","title":"Ensure Change Quality","text":"<p>Your pull request will automatically be tested and marked as \"green\" when it is ready for merging. If any builds fail (\"red\" status), you need to fix the issues listed in console logs. Any change to the PR branch will automatically trigger the checks, so you don't need to recreate the PR\u2014just wait for the updated results.</p> <p>Regardless of automated tests, ensure the quality of your changes:</p> <ul> <li>Test your changes locally:</li> <li>Double-check your code.</li> <li>Run tests locally to identify and fix potential issues.</li> <li>Before creating a PR, ensure your branch is up to date with the latest state of the branch you are contributing to (e.g. <code>git fetch upstream &amp;&amp; git merge upstream/master</code>).</li> </ul>"},{"location":"contributing/pull_requests/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Create your PR in draft state.</li> <li>Add a clear description of your changes and link any related issues.</li> <li>Request AI review by commenting <code>@coderabbit review</code> on your PR.</li> <li>Address any AI-suggested improvements.</li> <li>When ready, change PR state to \"Ready for review\" and assign reviewers.</li> <li>Address reviewer feedback.</li> <li>Once approved, your changes can be merged.</li> </ol> <p>Note: The AI review stage is optional but recommended for larger changes.</p>"},{"location":"contributing/pull_requests/#test-policy","title":"Test Policy","text":"<ul> <li>We use <code>pytest</code> for unit testing.</li> <li>All changes should ideally include tests.</li> <li>Focus on testing business logic and complex functionality.</li> <li>Generally, we don't test Django views unless they contain significant logic.</li> <li>When view logic becomes complex, extract it into separate functions and test those.</li> </ul>"},{"location":"contributing/pull_requests/#documentation-policy","title":"Documentation Policy","text":"<ul> <li>User-facing changes should be accompanied by documentation updates in the docs repo.</li> <li>Link the docs PR to the code PR.</li> <li>Merge the docs PR after the code PR.</li> </ul> <p>See the user docs guide for more detail.</p>"},{"location":"contributing/pull_requests/#communication","title":"Communication","text":"<p>We use GitHub issues for most work and have a GitHub project where we prioritize and plan work: GitHub Project.</p> <p>General questions and discussions can be conducted in the GitHub Discussions section.</p>"},{"location":"contributing/pull_requests/#need-additional-help-check-these-articles","title":"Need Additional Help? Check These Articles","text":"<ul> <li>How to create a fork</li> <li>Install Git</li> </ul>"},{"location":"developer_guides/","title":"Developer Guides","text":"<p>These guides are divided into two groups:</p> <p>Process Guides</p> <p>These are intended to inform developers how certain processes within the core OCS team work.</p> <p>Code Systems</p> <p>Each of these guides relates to a specific subsystem / subcomponent of the OCS codebase. These documents are intended as documentation for the given subsystem.</p> <p>In addition to the documents in this section, you may also find the OCS DeepWiki useful.</p>"},{"location":"developer_guides/common_practises/","title":"Common Practices","text":""},{"location":"developer_guides/common_practises/#rendering-tags-for-tagged-objects","title":"Rendering Tags for Tagged Objects","text":"<p>When displaying objects that inherit from <code>TaggedModelMixin</code>, always prefetch tag data to avoid N+1 queries. Use <code>object.prefetched_tags_json</code> in templates to access the prefetched tags.</p>"},{"location":"developer_guides/common_practises/#implementation","title":"Implementation","text":"<p>Query with prefetch: <pre><code>from django.db.models import Prefetch\n\nmessages_queryset = (\n    ChatMessage.objects.filter(chat=session.chat)\n    .prefetch_related(\n        Prefetch(\n            \"tagged_items\",\n            queryset=CustomTaggedItem.objects.select_related(\"tag\", \"user\"),\n            to_attr=\"prefetched_tagged_items\",  # Required attribute name\n        )\n    )\n)\n</code></pre></p>"},{"location":"developer_guides/common_practises/#key-points","title":"Key Points","text":"<ul> <li>Must use <code>to_attr=\"prefetched_tagged_items\"</code> - this exact name is required</li> <li>Include <code>select_related(\"tag\", \"user\")</code> for optimal performance</li> </ul>"},{"location":"developer_guides/common_practises/#using-tom-select-for-multiselect-inputs","title":"Using Tom Select for Multiselect Inputs","text":"<p>For rich multiselect UI elements, we use the Tom Select JavaScript library. It's versatile and can be configured for simple selection or for creating new items on-the-fly (like tags).</p>"},{"location":"developer_guides/common_practises/#initialization","title":"Initialization","text":"<p>To use it, you need an HTML element, typically a <code>&lt;select multiple&gt;</code>, and then you initialize the <code>TomSelect</code> object in your JavaScript, pointing it to that element. TomSelect is available globally on the <code>window</code> object as <code>window.TomSelect</code>.</p> <p>HTML: <pre><code>&lt;select id=\"teams-select\" multiple class=\"w-full\"&gt;&lt;/select&gt;\n</code></pre></p> <p>JavaScript: <pre><code>const selectElement = document.getElementById(\"teams-select\");\nconst teamsSelect = new TomSelect(selectElement, {\n    plugins: ['remove_button'],\n    maxItems: null,\n});\n</code></pre></p>"},{"location":"developer_guides/deployment/","title":"Deployment Process","text":""},{"location":"developer_guides/deployment/#continuous-deployment","title":"Continuous Deployment","text":"<ul> <li>All changes merged to the <code>main</code> branch trigger an automated deployment.</li> <li>Deployment is only triggered by successful completion of the lint_and_test.yml GitHub workflow.</li> <li>Deployment is executed by the deploy.yml GitHub action.</li> </ul>"},{"location":"developer_guides/deployment/#monitoring-deployments","title":"Monitoring Deployments","text":"<ul> <li>Deploy notifications are automatically sent to #open-chat-studio-dev Slack channel.</li> <li>Each notification includes:<ul> <li>Build status</li> <li>Changes included in the deployment</li> <li>Deploy completion status</li> </ul> </li> </ul>"},{"location":"developer_guides/deployment/#best-practices","title":"Best Practices","text":"<ul> <li>Always monitor the Slack channels after merging to main.</li> <li>Watch for successful completion of your deployment.</li> <li>Watch for Sentry errors after deployment.</li> </ul>"},{"location":"developer_guides/deployment/#rollback-process","title":"Rollback Process","text":"<ul> <li>Although rollback is possible, we would prefer to roll forward by deploying a fix to the issue.</li> <li>If issues are detected, notify the team in #open-chat-studio-dev.</li> <li>Monitor #ocs-ops for any related errors.</li> <li>Work with the team to determine the best course of action.</li> </ul>"},{"location":"developer_guides/dynamic_filters/","title":"Dynamic Filters","text":"<p>Dynamic filters provide a flexible way to filter data on the frontend and backend. This guide explains how to use and create new dynamic filters.</p>"},{"location":"developer_guides/dynamic_filters/#how-it-works","title":"How it Works","text":"<p>The dynamic filtering system is composed of two main parts: a backend that defines the filtering logic and a frontend that provides the user interface.</p>"},{"location":"developer_guides/dynamic_filters/#backend","title":"Backend","text":"<p>The backend is responsible for defining the filters and applying them to the database queries. The core components are:</p> <ul> <li> <p><code>ColumnFilter</code>: An abstract base class that defines the interface for a single column filter. Each <code>ColumnFilter</code> implementation processes URL parameters and applies the appropriate database filter to a queryset. The base class automatically maps operators to methods (e.g., \"equals\" \u2192 <code>apply_equals</code>).</p> </li> <li> <p><code>MultiColumnFilter</code>: A container class that holds a list of <code>ColumnFilter</code> instances and applies them to a queryset. It provides a <code>columns()</code> class method to list available filter column names and handles the orchestration of applying multiple filters.</p> </li> <li> <p>Filter Types: <code>StringColumnFilter</code>, <code>ChoiceColumnFilter</code>, and <code>TimestampFilter</code> provide pre-built implementations for common filtering patterns, reducing boilerplate code.</p> </li> <li> <p>Filter Implementations: Concrete implementations of <code>ColumnFilter</code> can be found in <code>apps/web/dynamic_filters/column_filters.py</code> (base filters like <code>TimestampFilter</code>, <code>ParticipantFilter</code>) and in app-specific <code>filters.py</code> files throughout the project (e.g., <code>apps/experiments/filters.py</code>).</p> </li> <li> <p>FilterParams &amp; ColumnFilterData: <code>FilterParams</code> extracts and organizes filter data from request query parameters into <code>ColumnFilterData</code> objects, which contain the column name, operator, and value for each filter.</p> </li> </ul>"},{"location":"developer_guides/dynamic_filters/#frontend","title":"Frontend","text":"<p>The frontend is built using Alpine.js and HTMX. It dynamically generates the filter UI based on the configuration provided by the backend.</p> <ul> <li>Filter Template: The main filter template is <code>templates/experiments/filters.html</code>. This template contains the Alpine.js component that manages the filter state and UI.</li> <li>Filter Configuration: The backend provides the filter configuration to the frontend through a set of <code>df_*</code> context variables. These variables are passed as JSON scripts in the HTML and then used to initialize the Alpine.js component. See <code>apps/experiments/views/experiment.py</code> for an example of how this data is provided to the template.</li> </ul>"},{"location":"developer_guides/dynamic_filters/#linking-query-parameters-to-orm-operations","title":"Linking query parameters to ORM operations","text":""},{"location":"developer_guides/dynamic_filters/#query-parameters","title":"Query Parameters","text":"<p>Filter values are passed through URL query parameters using a structured naming convention:</p> <ul> <li><code>filter_{i}_column</code> - Specifies which column to filter on (matches the <code>query_param</code> of a <code>ColumnFilter</code>)</li> <li><code>filter_{i}_operator</code> - Defines the filter operation (e.g., equals, contains, before, after)</li> <li><code>filter_{i}_value</code> - Contains the actual filter value</li> </ul> <p>The <code>{i}</code> represents the filter index (0 to <code>MAX_FILTER_PARAMS-1</code>), allowing multiple filters to be applied simultaneously (e.g., <code>filter_0_column</code>, <code>filter_1_column</code>, etc.).</p>"},{"location":"developer_guides/dynamic_filters/#filterparams-and-columnfilterdata","title":"FilterParams and ColumnFilterData","text":"<p>The <code>FilterParams</code> class extracts filter parameters from request query parameters and organizes them into <code>ColumnFilterData</code> objects. Each <code>ColumnFilterData</code> contains the column name, operator, and value for a single filter.</p>"},{"location":"developer_guides/dynamic_filters/#column-filter","title":"Column Filter","text":"<p>The <code>ColumnFilter</code> class acts as a bridge between query parameters and ORM filters. Each filter defines a <code>query_param</code> attribute that corresponds to the column name in the query parameters. When a request contains <code>filter_{i}_column</code> matching this <code>query_param</code>, the filter processes the associated operator and value to generate the appropriate database query.</p> <p>The <code>ColumnFilter.apply()</code> method: 1. Retrieves the <code>ColumnFilterData</code> for its <code>query_param</code> from <code>FilterParams</code> 2. Converts the operator to a method name (e.g., \"starts with\" \u2192 <code>apply_starts_with</code>) 3. Calls the appropriate <code>apply_*</code> method with the parsed value</p>"},{"location":"developer_guides/dynamic_filters/#available-filter-types","title":"Available Filter Types","text":"<p>The dynamic filter system provides several filter types that implements common filtering patterns:</p>"},{"location":"developer_guides/dynamic_filters/#stringcolumnfilter","title":"StringColumnFilter","text":"<p>Provides methods for string-based filtering operations: - <code>apply_equals()</code> - Exact match - <code>apply_contains()</code> - Case-insensitive contains - <code>apply_does_not_contain()</code> - Case-insensitive exclusion - <code>apply_starts_with()</code> - Case-insensitive starts with - <code>apply_ends_with()</code> - Case-insensitive ends with - <code>apply_any_of()</code> - Match any value from a JSON list</p> <p>Requires setting a <code>column</code> class variable with the database field path.</p>"},{"location":"developer_guides/dynamic_filters/#choicecolumnfilter","title":"ChoiceColumnFilter","text":"<p>Provides methods for choice-based filtering operations: - <code>apply_any_of()</code> - Match any value from a list - <code>apply_all_of()</code> - Match all values from a list (AND logic) - <code>apply_excludes()</code> - Exclude all values from a list</p> <p>Requires setting a <code>column</code> class variable with the database field path.</p>"},{"location":"developer_guides/dynamic_filters/#available-operators","title":"Available Operators","text":"<p>The system supports the following operators defined in the <code>Operators</code> enum:</p> <ul> <li>String operations: <code>equals</code>, <code>contains</code>, <code>does not contain</code>, <code>starts with</code>, <code>ends with</code>, <code>any of</code></li> <li>Date/time operations: <code>on</code>, <code>before</code>, <code>after</code>, <code>range</code></li> <li>Choice operations: <code>any of</code>, <code>all of</code>, <code>excludes</code></li> </ul> <p>Operators are configured in the <code>ColumnFilter</code> class. They are determined automatically based on the filter type but can be overridden.</p>"},{"location":"developer_guides/dynamic_filters/#step-by-step-walkthrough-creating-a-product-inventory-filter","title":"Step-by-Step Walkthrough: Creating a Product Inventory Filter","text":"<p>This walkthrough will guide you through creating a complete filtering system for a hypothetical product inventory feature. We'll create a custom filter column, integrate it into a multi-column filter, and wire it up to a view.</p>"},{"location":"developer_guides/dynamic_filters/#step-1-create-a-custom-column-filter","title":"Step 1: Create a Custom Column Filter","text":"<p>First, let's create a filter for product categories using the existing filter types:</p> <pre><code># apps/inventory/filters.py\nfrom apps.web.dynamic_filters.base import ChoiceColumnFilter, StringColumnFilter\nfrom apps.web.dynamic_filters.column_filters import TimestampFilter\n\nclass ProductCategoryFilter(ChoiceColumnFilter):\n    \"\"\"Filter products by category name.\"\"\"\n    query_param: str = \"category\"\n    column: str = \"category__name\"  # Database field path\n    label: str = \"Category\"\n\n    def prepare(self, team, **kwargs):\n        self.options = [\n            {\"id\": cat.id, \"label\": cat.name} \n            for cat in Category.objects.filter(team=team).all()\n        ]\n\np_filter = ProductCategoryFilter()\n\n# Alternately, you can construct it directly using kwargs:\n\np_filter = ChoiceColumnFilter(label=\"Category\", query_param=\"category\", column=\"category__name\", options=[...])\n</code></pre>"},{"location":"developer_guides/dynamic_filters/#step-2-create-a-multi-column-filter","title":"Step 2: Create a Multi-Column Filter","text":"<p>Now let's create a multi-column filter that combines our new category filter with existing filters:</p> <pre><code># apps/inventory/filters.py (continued)\nfrom typing import ClassVar\nfrom collections.abc import Sequence\nfrom apps.web.dynamic_filters.base import MultiColumnFilter\n\nclass ProductInventoryFilter(MultiColumnFilter):\n    \"\"\"Filter for product inventory using multiple column filters.\"\"\"\n\n    filters: ClassVar[Sequence[ColumnFilter]] = [\n        ProductCategoryFilter(),\n        TimestampFilter(label=\"Created At\", column=\"created_at\", query_param=\"created_date\"),\n        TimestampFilter(label=\"Updated At\", column=\"updated_at\", query_param=\"last_updated\"),\n        # Add more filters as needed\n    ]\n\n    def prepare_queryset(self, queryset):\n        \"\"\"Prepare the queryset with any necessary annotations or select_related calls.\"\"\"\n        return queryset.select_related('category')\n</code></pre>"},{"location":"developer_guides/dynamic_filters/#step-3-create-the-model-and-table-for-completeness","title":"Step 3: Create the Model and Table (for completeness)","text":"<pre><code># apps/inventory/models.py\nfrom django.db import models\n\nclass Category(models.Model):\n    name = models.CharField(max_length=100)\n    description = models.TextField(blank=True)\n\nclass Product(models.Model):\n    name = models.CharField(max_length=200)\n    category = models.ForeignKey(Category, on_delete=models.CASCADE)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    stock_quantity = models.IntegerField()\n    created_at = models.DateTimeField(auto_now_add=True)\n    updated_at = models.DateTimeField(auto_now=True)\n</code></pre> <pre><code># apps/inventory/tables.py\nimport django_tables2 as tables\nfrom .models import Product\n\nclass ProductTable(tables.Table):\n    class Meta:\n        model = Product\n        fields = ('name', 'category', 'price', 'stock_quantity', 'created_at', 'updated_at')\n        attrs = {'class': 'table table-striped'}\n</code></pre>"},{"location":"developer_guides/dynamic_filters/#step-4-create-the-view","title":"Step 4: Create the View","text":"<p>Create a view that uses our new filter system:</p> <pre><code># apps/inventory/views.py\nfrom django.views.generic import TemplateView\nfrom django_tables2 import SingleTableView\nfrom apps.web.dynamic_filters.datastructures import FilterParams\nfrom apps.experiments.filters import get_filter_context_data\nfrom .models import Product\nfrom .tables import ProductTable\nfrom .filters import ProductInventoryFilter\n\nclass ProductInventoryView(SingleTableView):\n    \"\"\"View for displaying filtered product inventory.\"\"\"\n    model = Product\n    table_class = ProductTable\n    template_name = \"inventory/product_list.html\"\n    paginate_by = 25\n\n    def get_queryset(self):\n        \"\"\"Apply filters to the queryset.\"\"\"\n        queryset = super().get_queryset()\n\n        # Create filter instance and apply it\n        product_filter = ProductInventoryFilter()\n        timezone = self.request.session.get(\"detected_tz\")\n\n        filter_params = FilterParams.from_request(self.request)\n        return product_filter.apply(queryset, filter_params, timezone)\n\n    def get_context_data(self, **kwargs):\n        \"\"\"Add filter configuration to the template context.\"\"\"\n        context = super().get_context_data(**kwargs)\n\n        # Add filter context data using the helper function\n        filter_context = get_filter_context_data(\n            team=self.request.team,  # Assuming team is available in request\n            columns=ProductInventoryFilter.columns(self.request.team),\n            date_range_column=\"created_date\",\n            table_url=reverse(\"inventory:product_table\"),  # Your HTMX table URL\n            table_container_id=\"product-table\",\n            table_type=\"your-table-type\"\n        )\n\n        context.update(filter_context)\n        return context\n</code></pre>"},{"location":"developer_guides/dynamic_filters/#step-5-create-the-template-and-update-filters","title":"Step 5: Create the Template and Update Filters","text":"<p>Create the template that includes the filter interface:</p> <pre><code>&lt;!-- apps/inventory/templates/inventory/product_list.html --&gt;\n{% extends \"base.html\" %}\n{% load django_tables2 %}\n\n{% block title %}Product Inventory{% endblock title %}\n\n{% block content %}\n&lt;div class=\"container mx-auto px-4 py-8\"&gt;\n    &lt;h1 class=\"text-2xl font-bold mb-6\"&gt;Product Inventory&lt;/h1&gt;\n    &lt;!-- Include the dynamic filters --&gt;\n    {% include \"experiments/filters.html\" with df_table_type=\"your-table-type\" %}\n    &lt;!-- Rest of the page --&gt;\n&lt;/div&gt;\n\n{% endblock content %}\n</code></pre>"},{"location":"developer_guides/feature_flags/","title":"Feature Flags","text":"<p>Open Chat Studio uses Django Waffle for feature flags with a custom team-based implementation. Feature flags allow you to toggle features on/off for specific teams without code deployments.</p>"},{"location":"developer_guides/feature_flags/#overview","title":"Overview","text":"<p>Feature flags in Open Chat Studio are: - Team-scoped: Flags can be enabled/disabled per team - Database-driven: Stored in the database and configurable via a custom admin page - Cached: Uses Redis for performance - Convention-based: New flags must follow naming conventions</p>"},{"location":"developer_guides/feature_flags/#custom-flag-model","title":"Custom Flag Model","text":"<p>The system uses a custom <code>Flag</code> model (<code>apps.teams.models.Flag</code>) that extends Django Waffle's <code>AbstractUserFlag</code> to support team-based activation:</p> <pre><code>from apps.teams.models import Flag\n\n# Create a flag\nflag = Flag.objects.create(name=\"flag_new_feature\")\n\n# Activate for specific teams\nflag.teams.add(my_team)\n\n# Check if active for a team\nflag.is_active_for_team(my_team)\n</code></pre> <p>Tip</p> <p>Flags are created automatically in the database when referenced in code or templates so it is not necessary to create them manually.</p>"},{"location":"developer_guides/feature_flags/#naming-convention","title":"Naming Convention","text":"<p>All new feature flags MUST be prefixed with <code>flag_</code></p> <pre><code># \u2705 Correct\n\"flag_new_dashboard\"\n\"flag_enhanced_chat\" \n\n# \u274c Incorrect - will raise ValidationError\n\"new_dashboard\"\n</code></pre> <p>This naming convention:</p> <ul> <li>Prevents naming conflicts</li> <li>Makes flags easily identifiable in code</li> <li>Enables better tooling and management</li> </ul>"},{"location":"developer_guides/feature_flags/#usage-in-code","title":"Usage in Code","text":""},{"location":"developer_guides/feature_flags/#python","title":"Python","text":"<p>In Django views or other Python code where a request object is available, you can check if a feature flag is active for the current team or user:</p> <pre><code>from waffle import flag_is_active\n\ndef my_view(request):\n    if flag_is_active(request, \"flag_new_feature\"):\n        # New feature code\n        return render(request, \"new_template.html\")\n    else:\n        # Legacy code\n        return render(request, \"old_template.html\")\n</code></pre> <p>When a request object is not available, you can still check if a flag is active by using the <code>Flag</code> model directly:</p> <pre><code>flag = Flag.get(\"flag_new_feature\")\nflag.is_active_for_team(team)\nflag.is_active_for_user(user)\n</code></pre>"},{"location":"developer_guides/feature_flags/#django-templates","title":"Django Templates","text":"<pre><code>{% load waffle_tags %}\n\n{% flag \"flag_new_feature\" %}\n    &lt;div class=\"new-feature\"&gt;\n        &lt;!-- New feature UI --&gt;\n    &lt;/div&gt;\n{% endflag %}\n</code></pre>"},{"location":"developer_guides/feature_flags/#management-commands","title":"Management Commands","text":""},{"location":"developer_guides/feature_flags/#check-flag-usage","title":"Check Flag Usage","text":"<p>Use the <code>check_flag_usage</code> management command to find where flags are used in the codebase:</p> <pre><code># Check all flags\npython manage.py check_flag_usage\n\n# Check specific flag\npython manage.py check_flag_usage --flag-name flag_new_feature\n</code></pre> <p>Output example: <pre><code>Found 5 flags in database\n\nFlags found in code (3):\n  \u2713 flag_new_dashboard\n    - apps/web/views.py\n    - templates/dashboard.html\n  \u2713 flag_enhanced_chat\n    - apps/chat/views.py\n\nFlags not found in code (2):\n  \u2717 flag_old_feature\n  \u2717 flag_experimental_ui\n</code></pre></p> <p>This helps identify:</p> <ul> <li>Active flags: Currently used in code</li> <li>Dead flags: No longer referenced and can be removed</li> </ul>"},{"location":"developer_guides/feature_flags/#best-practices","title":"Best Practices","text":""},{"location":"developer_guides/feature_flags/#naming","title":"Naming","text":"<ul> <li>Use descriptive names: <code>flag_enhanced_search</code> not <code>flag_search</code></li> <li>Include the feature area: <code>flag_chat_reactions</code>, <code>flag_dashboard_v2</code></li> <li>Avoid abbreviations: <code>flag_new_authentication</code> not <code>flag_new_auth</code></li> </ul>"},{"location":"developer_guides/feature_flags/#code-organization","title":"Code Organization","text":"<ul> <li>Keep flag logic simple and readable</li> <li>Avoid deep nesting of feature flag conditions</li> <li>Consider extracting flag-dependent code into separate functions/classes</li> </ul> <pre><code># \u2705 Good\ndef get_dashboard_data(request):\n    if flag_is_active(request, 'flag_new_dashboard'):\n        return get_enhanced_dashboard_data(request)\n    return get_legacy_dashboard_data(request)\n\n# \u274c Avoid deep nesting\ndef complex_view(request):\n    if flag_is_active(request, 'flag_feature_a'):\n        if flag_is_active(request, 'flag_feature_b'):\n            # Deep nesting makes code hard to follow\n</code></pre>"},{"location":"developer_guides/feature_flags/#documentation","title":"Documentation","text":"<ul> <li>Document the purpose of each flag</li> <li>Include rollout plans in PR descriptions  </li> <li>Update team documentation when adding user-facing features</li> </ul>"},{"location":"developer_guides/feature_flags/#testing","title":"Testing","text":"<ul> <li>Test both flag states (enabled/disabled)</li> <li>Include flag state in test names</li> </ul> <pre><code>def test_dashboard_with_new_feature_enabled(self):\n    with override_flag('flag_new_dashboard', active=True):\n        # Test new behavior\n\ndef test_dashboard_with_new_feature_disabled(self):\n    with override_flag('flag_new_dashboard', active=False):\n        # Test legacy behavior\n</code></pre>"},{"location":"developer_guides/index_managers/","title":"Index Manager Classes","text":"<p>Index managers provide an abstraction layer for managing document embeddings and vector stores in Open Chat Studio. They are LLM provider-specific implementations that enable both remote (provider-hosted) and local (self-hosted) indexing strategies for document collections.</p>"},{"location":"developer_guides/index_managers/#architecture-overview","title":"Architecture Overview","text":"<p>The index manager system follows an abstract base class pattern with two main hierarchies:</p> <pre><code>RemoteIndexManager (ABC)\n\u251c\u2500\u2500 OpenAIRemoteIndexManager\n\nLocalIndexManager (ABC)\n\u251c\u2500\u2500 OpenAILocalIndexManager\n</code></pre> <p>The system supports two indexing strategies: - Remote indexing: Vector stores are created and managed by external providers (e.g., OpenAI) - Local indexing: Embeddings are generated locally and stored in the application database</p>"},{"location":"developer_guides/index_managers/#core-classes","title":"Core Classes","text":""},{"location":"developer_guides/index_managers/#remoteindexmanager","title":"RemoteIndexManager","text":"<p>Abstract base class for managing vector stores in remote indexing services. Provides a common interface for interacting with external vector store providers.</p>"},{"location":"developer_guides/index_managers/#openairemoteindexmanager","title":"OpenAIRemoteIndexManager","text":"<p>OpenAI-specific implementation for managing vector stores using OpenAI's vector store API.</p>"},{"location":"developer_guides/index_managers/#localindexmanager","title":"LocalIndexManager","text":"<p>Abstract base class for managing local embedding operations. Handles text processing and embedding generation on the application side.</p>"},{"location":"developer_guides/index_managers/#usage-example","title":"Usage Example","text":""},{"location":"developer_guides/index_managers/#getting-an-index-manager","title":"Getting an Index Manager","text":"<p>Index managers are obtained through the Collection model's <code>get_index_manager()</code> method:</p> <pre><code>from apps.documents.models import Collection\n\n# Get collection\ncollection = Collection.objects.get(id=collection_id)\n\n# Get appropriate index manager based on collection configuration\nindex_manager = collection.get_index_manager()\n</code></pre> <p>The method returns: - <code>RemoteIndexManager</code> instance if <code>collection.is_remote_index</code> is <code>True</code> - <code>LocalIndexManager</code> instance if <code>collection.is_remote_index</code> is <code>False</code></p>"},{"location":"developer_guides/index_managers/#remote-index-operations","title":"Remote Index Operations","text":"<pre><code># Create a new vector store\ncollection.ensure_remote_index_created(\n    file_ids=[\"file-123\", \"file-456\"]  # Optional initial files.\n)\n\n# Upload file to remote service\nfile = File.objects.get(id=file_id)\nindex_manager.upload_file_to_remote(file)\n\n# Link files to existing vector store with chunking\nindex_manager.link_files_to_remote_index(\n    file_ids=[\"file-789\", \"file-101\"],\n    chunk_size=1000,\n    chunk_overlap=200\n)\n\n# Check if file exists remotely\nexists = index_manager.file_exists_at_remote(file)\n\n# Clean up - delete vector store\nindex_manager.delete_remote_index()\n</code></pre>"},{"location":"developer_guides/index_managers/#local-index-operations","title":"Local Index Operations","text":"<pre><code># Generate embedding for text content\ncontent = \"This is a sample document content.\"\nembedding_vector = index_manager.get_embedding_vector(content)\n\n# Chunk large text with overlap\ntext = \"Long document content here...\"\nchunks = index_manager.chunk_content(\n    text=text,\n    chunk_size=500,\n    chunk_overlap=50\n)\n\n# Process each chunk for storage\nfor i, chunk in enumerate(chunks):\n    embedding = index_manager.get_embedding_vector(chunk)\n    # Store in FileChunkEmbedding model...\n</code></pre>"},{"location":"developer_guides/index_managers/#collection-integration","title":"Collection Integration","text":"<p>Index managers are typically used through the Collection model's indexing methods:</p> <pre><code>from apps.documents.models import Collection, CollectionFile\n\ncollection = Collection.objects.get(id=collection_id)\n\n# Add files to index (automatically chooses remote vs local)\ncollection_files = CollectionFile.objects.filter(\n    collection=collection,\n    status=FileStatus.PENDING\n).iterator(100)\n\ncollection.add_files_to_index(\n    collection_files=collection_files,\n    chunk_size=1000,\n    chunk_overlap=200\n)\n</code></pre>"},{"location":"developer_guides/index_managers/#configuration-driven-selection","title":"Configuration-Driven Selection","text":"<p>The system automatically selects the appropriate manager based on collection settings:</p> <pre><code>def get_index_manager(self):\n    if self.is_index and self.is_remote_index:\n        return self.llm_provider.get_remote_index_manager(\n            self.openai_vector_store_id\n        )\n    else:\n        return self.llm_provider.get_local_index_manager(\n            embedding_model_name=self.embedding_provider_model.name\n        )\n</code></pre>"},{"location":"developer_guides/index_managers/#citations","title":"Citations","text":"<p>The platform has a built-in mechanism for citing sources used by the LLM, particularly when retrieving information from indexed documents. This process involves generation, parsing, and final rendering of citations.</p>"},{"location":"developer_guides/index_managers/#1-citation-generation","title":"1. Citation Generation","text":"<p>When an agent uses a tool like <code>SearchIndexTool</code> to query a document collection, it gains access to the content of relevant files. The LLM is instructed to cite its sources by embedding a special tag in its response whenever it uses information from a file.</p> <p>The citation format is <code>&lt;CIT file-id /&gt;</code>, where <code>file-id</code> is the unique identifier of the cited <code>File</code> model instance. This format is defined by the <code>OCS_CITATION_PATTERN</code> constant found in <code>apps.chat.agent.tools</code>.</p>"},{"location":"developer_guides/index_managers/#2-building-the-reference-section","title":"2. Building the Reference Section","text":"<p>After the LLM generates a response containing these citation tags, the system processes the message to create a human-readable reference section. This is handled by the <code>add_citation_section_from_cited_files</code> method in the <code>ChatAdapter</code> class (<code>apps/service_providers/llm_service/adapters.py</code>).</p> <p>This method performs three main actions: 1.  It scans the AI message for all instances of the <code>&lt;CIT file-id /&gt;</code> pattern. 2.  Each tag is replaced with a footnote-style reference (e.g., <code>[^1]</code>, <code>[^2]</code>). It keeps track of cited files to reuse reference numbers for multiple citations of the same file. 3.  It appends a markdown-formatted reference list to the end of the message. Each entry includes the reference number, the original file name, and a download link for that file.</p> <p>This processing step occurs within the <code>invoke</code> method of the <code>LLMChat</code> runnable (<code>apps/service_providers/llm_service/runnables.py</code>) before the final message is saved and sent to the user.</p> <p>Example transformation:</p> <p>Input from LLM: <pre><code>The sky is blue &lt;CIT 123 /&gt;. The grass is green &lt;CIT 456 /&gt;.\n</code></pre></p> <p>Output after processing: <pre><code>The sky is blue [^1]. The grass is green [^2].\n\n[^1]: [document_a.pdf](https://example.com/download/123)\n[^2]: [source_b.txt](https://example.com/download/456)\n</code></pre></p>"},{"location":"developer_guides/index_managers/#3-final-rendering-in-channels","title":"3. Final Rendering in Channels","text":"<p>The markdown-formatted message, now including footnote-style references, is passed to the channel layer for final display to the user. In <code>apps/chat/channels.py</code>, a function named <code>_format_reference_section</code> is responsible for parsing this markdown and rendering it appropriately for the specific channel (e.g., converting it to HTML for the web interface). This ensures that users see a clean, clickable list of citations in the final UI.</p>"},{"location":"developer_guides/slack_channel_integration/","title":"Slack Integration on Localhost","text":"<p>This guide helps you set up Slack integration with your development environment using a local server exposed via ngrok.</p>"},{"location":"developer_guides/slack_channel_integration/#1-create-a-slack-app","title":"1. Create a Slack App","text":"<ol> <li>Visit https://api.slack.com/apps and click Create New App.</li> <li>Choose From scratch.</li> <li>Provide a name for your app and select your workspace.</li> </ol>"},{"location":"developer_guides/slack_channel_integration/#2-add-bot-scopes","title":"2. Add Bot Scopes","text":"<ol> <li>Go to OAuth &amp; Permissions \u2192 Scopes.</li> <li>Under Bot Token Scopes, add the scopes that your app needs, for example:</li> <li><code>chat:write</code> \u2014 allows sending messages</li> <li><code>files:write</code> \u2014 allows uploading files</li> <li>Click Save Changes.</li> </ol>"},{"location":"developer_guides/slack_channel_integration/#3-install-the-app-to-your-workspace","title":"3. Install the App to Your Workspace","text":"<ul> <li>Navigate to Install App in the left sidebar.</li> <li>Click Install to Workspace and authorize.</li> </ul>"},{"location":"developer_guides/slack_channel_integration/#4-update-environment-variables","title":"4. Update Environment Variables","text":"<ol> <li>Go to the Basic Information section of your app.</li> <li>Copy the following values:    <code>SLACK_CLIENT_ID</code> <code>SLACK_CLIENT_SECRET</code> <code>SLACK_SIGNING_SECRET</code></li> <li>Add these to your <code>.env</code> file:</li> </ol> <pre><code>SLACK_CLIENT_ID=your-client-id\nSLACK_CLIENT_SECRET=your-client-secret\nSLACK_SIGNING_SECRET=your-signing-secret\n</code></pre>"},{"location":"developer_guides/slack_channel_integration/#5-install-ngrok","title":"5. Install ngrok","text":"<ol> <li>Download and install ngrok from https://ngrok.com/download.</li> <li>Start your Django server with a public URL using:</li> </ol> <p><pre><code>invoke runserver --public\n</code></pre> 3. This will expose your local server and generate a public HTTPS URL like:    <pre><code>https://abc123.ngrok.io\n</code></pre></p>"},{"location":"developer_guides/slack_channel_integration/#6-update-redirect-urls-in-slack-app","title":"6. Update Redirect URLs in Slack App","text":"<ol> <li>In your Slack app, go to OAuth &amp; Permissions.</li> <li>Under Redirect URLs, add:</li> </ol> <p><pre><code>https://&lt;your-ngrok-subdomain&gt;.ngrok.io/slack/oauth_redirect\n</code></pre> 3. Click Save URLs.</p>"},{"location":"developer_guides/slack_channel_integration/#7-set-up-slack-events-endpoint","title":"7. Set Up Slack Events Endpoint","text":"<ol> <li>Go to Event Subscriptions in your Slack app.</li> <li>Toggle Enable Events.</li> <li>Set the Request URL to:</li> </ol> <p><pre><code>https://&lt;your-ngrok-subdomain&gt;.ngrok.io/slack/events\n</code></pre> 4. Under Subscribe to Bot Events, add:    - <code>message.channels</code>    - <code>message.im</code>    - Click Save Changes.</p>"},{"location":"developer_guides/slack_channel_integration/#8-update-local-django-settings","title":"8. Update Local Django Settings","text":"<p>In your <code>settings.py</code>:</p> <pre><code>SITE_URL_ROOT = \"https://&lt;your-ngrok-subdomain&gt;.ngrok.io\"\n\nALLOWED_HOSTS = [\n    \"localhost\",\n    \"127.0.0.1\",\n    \"&lt;your-ngrok-subdomain&gt;.ngrok.io\"\n]\n\nCSRF_TRUSTED_ORIGINS = [\n    \"https://&lt;your-ngrok-subdomain&gt;.ngrok.io\"\n]\n</code></pre>"},{"location":"developer_guides/slack_channel_integration/#9-configure-messaging-provider-in-open-chat-studio","title":"9. Configure Messaging Provider in Open Chat Studio","text":"<ol> <li>Go to Team Settings \u2192 Messaging Providers.</li> <li>Click Add, and select Slack as the provider type.</li> <li>Click Connect Slack \u2014 you'll be redirected to Slack's authorization screen.</li> </ol>"},{"location":"developer_guides/slack_channel_integration/#10-authorize-in-slack","title":"10. Authorize in Slack","text":"<ul> <li>Slack may auto-select a workspace. If the correct workspace isn't shown:  Open the link in Incognito mode or clear cookies.</li> <li>You'll be redirected to your ngrok URL (not <code>localhost</code>).</li> <li>Log back into Open Chat Studio if prompted.</li> <li>Navigate again to Team Settings \u2192 Messaging Providers and complete the Slack setup.</li> </ul>"},{"location":"developer_guides/slack_channel_integration/#done","title":"\u2705 Done!","text":"<p>Your Slack app is now integrated with your local development environment!</p>"},{"location":"developer_guides/user_docs/","title":"User Documentation and Changelog Process","text":"<p>User documentation and the user facing changelog are hosted in the doc repo and published to https://docs.openchatstudio.com/.</p> <p>In principle, all user-facing changes should be accompanied by documentation updates and a changelog but discretion should be used. For example, if a change is purely internal and doesn't affect the user experience, it may not need to be included or if it is a very minor change.</p>"},{"location":"developer_guides/user_docs/#changelog-process","title":"Changelog process","text":"<p>Ideally, when creating a PR, also create a PR in the docs repo with any documentation updates and a changelog entry and then add a link to the docs PR in your code changes PR.</p> <p>Changelog entries should be brief but should link to any relevant documentation for further details.</p>"},{"location":"developer_guides/user_docs/#changelog-summaries","title":"Changelog summaries","text":"<p>Once a week (currently on a Monday) a GitHub actions workflow runs and generates a release in the docs repo with a summary of the changes since the previous release. This creates a way for users to get notified of changes by subscribing to the release feed.</p> <p>The automated releases are created in <code>draft</code> state which allows a developer to review the generated text before publishing. The releases should contain the following sections:</p> <ul> <li>New Features: new features added to the prodcut</li> <li>Improvements: changes to existing features that don't classify as 'new features'</li> <li>Bug Fixes</li> </ul> <p>It should not contain a top level summary, upgrade recommendations, etc.</p> <p>The process for manually reviewing and publishing a release is:</p> <ol> <li>Review the repo diff between this release and the previous release. You can access this by using the 'Compare' drop down in the left sidebar. This is a good idea to ensure that the release notes are accurate and complete.</li> <li>Review the previous release notes to see if there are any items that have already been included in a previous release.</li> <li>If there are docs to link to for any item, ensure that they are added.</li> <li>If you think there should be docs where there aren't, either create them immediately or create a ticket to be prioritized later.</li> </ol> <p>Once you are happy with the release notes, publish the release. This will send a notification to all users who are subscribed to the release feed.</p>"},{"location":"developer_guides/user_docs/#api-documentation","title":"API Documentation","text":"<p>The OCS REST API is primarily documented via its OpenAPI schema. The schema is created using drf-spectacular.</p> <p>The current production schema is available at https://chatbots.dimagi.com/api/schema/. It is also kept in the code repository in the <code>api-schema.yml</code> file. This file serves two purposes:</p> <ol> <li>Provide an easy way to visually inspect changes to the schema.</li> <li>Provide a reference for generating API documentation in the docs repo (see below).</li> </ol> <p>The schema can be generated locally by running:</p> <pre><code>inv schema\n# OR\npython manage.py spectacular --file api-schema.yml --validate\n</code></pre>"},{"location":"developer_guides/user_docs/#api-schema-updates","title":"API Schema updates","text":"<p>Whenever changes are made that impact the API schema, the <code>api-schema.yml</code> file must also be updated. This is enforced by a test which will fail if the schema file is out of date. Ensuring that this file is up to date also allows us to it as a trigger for updating the API docs in the docs repo:</p> <ol> <li><code>api-schema.yml</code> file changes in the <code>main</code> branch.</li> <li><code>api-schema-dispatch.yml</code> GitHub action runs which sends a dispatch event to the OCS docs repo.</li> <li>A GitHub action in the OCS docs repo runs and creates a PR with any updated API docs.</li> </ol>"},{"location":"developer_guides/versioning/","title":"Versioning Dev Documentation","text":"<p>See also the User Documentation on versioning.</p>"},{"location":"developer_guides/versioning/#versioning-terminology","title":"Versioning Terminology","text":"Term User-Facing Term Description Working version Unreleased version The editable versio of an object. Default version Published version The version currently live and user facing. Version family \u2014 A group of instances that are versions of the same working instance. This includes the working version itself"},{"location":"developer_guides/versioning/#how-to-think-about-versioning","title":"How to Think About Versioning","text":"<p>Users are always working on the latest version of their chatbot. When they create a new version, it is really only freezing their progress and assigning a version number to it. Any new edits will be made on the next version.</p> <ul> <li>All versioned objects have a <code>working_version</code> field, which is a foreign key to an instance of the same model.</li> <li>Creating a new version means duplicating the <code>working version</code>. All objects that contribute to the behavior of the chatbot are also versioned and linked to the new version. The exception to this is global objects such as LLM providers which are never versioned.</li> <li>The duplicated object\u2019s <code>working_version</code> points to the original object.</li> <li>For objects like Experiments and Pipelines which have version numbers, the following applies:<ul> <li>The newly created version gets the current version number.</li> <li>The working version's version number is incremented.</li> </ul> </li> </ul>"},{"location":"developer_guides/versioning/#how-to-version-a-model","title":"How to Version a Model","text":"<p>If you add a model that needs to be versioned, you generally need to do the following:</p> <ol> <li> <p>Inherit from mixins:</p> <ul> <li><code>VersionsMixin</code> - Adds utility methods for working with versions.</li> <li><code>VersionsObjectManagerMixin</code> - This ensures that archived objects are excluded by default and helpful annotations are added to querysets of your model.</li> </ul> </li> <li> <p>Add these fields to your model:</p> <ul> <li><code>working_version</code>: A nullable foreign key to itself</li> <li><code>is_archived</code>: A <code>BooleanField</code> indicating whether or not this instance is archived</li> <li><code>version_number</code>: (optional) `IntegerField' used to track the objects version number. This is only really necessary for top level objects.</li> </ul> </li> <li> <p>Implement <code>version_details</code>: See the VersionDetails section</p> </li> <li>Filter returned objects to the UI: Be sure to only return working versions to users.</li> </ol> <p>If the model can be linked to a Pipeline Node, be sure to version this object whenever the node is versioned. The same goes for archiving. Whenever this node is archived and it is a versioned node, we need to make sure that all related versioned models are archived as well.</p>"},{"location":"developer_guides/versioning/#the-versiondetails-class","title":"The <code>VersionDetails</code> class","text":"<p>The <code>VersionDetails</code> class is a core component of the versioning system that encapsulates the version-specific information of a model instance. It consists of:</p> <ul> <li><code>instance</code>: The model instance being versioned</li> <li><code>fields</code>: A list of <code>VersionField</code> objects representing the versioned fields</li> <li><code>fields_changed</code>: A boolean indicating if any fields have changed</li> <li><code>fields_grouped</code>: Property that groups fields by their <code>group_name</code> for organized display</li> </ul> <p>Key methods:</p> <ul> <li><code>compare(previous_version_details)</code>: Compares the current instance with a previous version, tracking changes</li> <li><code>get_field(field_name)</code>: Retrieves a specific field by name</li> </ul> <p>Each <code>VersionField</code> represents a field or property of the model and can handle:</p> <ul> <li>Primitive values (strings, numbers, etc.)</li> <li>Querysets (collections of related objects)</li> <li>Versioned models (models that implement <code>version_details</code>)</li> <li>Unversioned models (regular Django models)</li> </ul> <p>When implementing versioning for a model, you must provide a <code>version_details</code> property that returns a <code>VersionDetails</code> instance with the fields you want to track.</p> <p>Example: <pre><code>def _get_version_details(self) -&gt; VersionDetails:\n    return VersionDetails(\n        instance=self,\n        fields=[\n            VersionField(group_name=\"General\", name=\"name\", raw_value=self.name),\n            VersionField(group_name=\"Settings\", name=\"enabled\", raw_value=self.enabled),\n        ]\n    )\n</code></pre></p>"},{"location":"developer_guides/versioning/#archiving","title":"Archiving","text":"<p>An object can only be archived if neither its working version nor any of its other versions are used by any published version of a related object.</p> <p>If the object is in use, the user should be informed of the specific usages and prompted to archive those related objects first. For reference, see the behavior when attempting to archive an <code>OpenAiAssistant</code>.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This section will help you set up your development environment and get started with Open Chat Studio.</p>"},{"location":"getting-started/#development-environment-setup","title":"Development Environment Setup","text":"<p>Open Chat Studio uses UV and Invoke for dev automation.</p>"},{"location":"getting-started/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.13 (recommended)</li> <li>Node.js &gt;= 22.14.0</li> <li>Docker and Docker Compose</li> <li>Git</li> </ul>"},{"location":"getting-started/#installation-steps","title":"Installation Steps","text":"<ol> <li> <p>Clone the repository</p> <pre><code>git clone https://github.com/dimagi/open-chat-studio.git\ncd open-chat-studio\n</code></pre> </li> <li> <p>Install dependencies</p> <pre><code>uv venv --python 3.13\nsource .venv/bin/activate\nuv sync\n</code></pre> </li> <li> <p>Run the automated setup</p> <pre><code>inv setup-dev-env\n</code></pre> <p>This will: - Install pre-commit hooks - Start database and Redis services - Run database migrations - Build frontend resources - Create a superuser</p> Manual steps </li> <li> <p>Start the development server</p> <pre><code>./manage.py runserver\n</code></pre> </li> <li> <p>Run Celery for background tasks</p> <p>Celery is required to handle LLM interactions. Run it using:</p> <pre><code>inv celery\n</code></pre> <p>For a production-like setup, use:</p> <pre><code>inv celery --gevent\n</code></pre> </li> </ol>"},{"location":"getting-started/#install-the-pre-commit-hooks","title":"Install the pre-commit hooks","text":"<pre><code>pre-commit install --install-hooks\n</code></pre>"},{"location":"getting-started/#set-up-database","title":"Set up database","text":"<p>Start the database and redis services and run the DB migrations:</p> <pre><code>inv up  # start the docker services\ncp .env.example .env\n./manage.py migrate\n</code></pre>"},{"location":"getting-started/#build-the-front-end-resources","title":"Build the front-end resources","text":"<p>To build JavaScript and CSS files, first install npm packages:</p> <pre><code>inv npm --install\n# or\nnpm install\nnpm run dev\n</code></pre> <p>Note</p> <p>You should be using node &gt;= 22.14.0. If you have nvm  installed, you can run <code>nvm use</code> to switch to the correct version.</p> <p>To check which version you are using use <code>node --version</code>.</p>"},{"location":"getting-started/#create-a-superuser","title":"Create a superuser","text":"<pre><code>./manage.py createsuperuser\n</code></pre>"},{"location":"getting-started/#common-development-tasks","title":"Common Development Tasks","text":""},{"location":"getting-started/#running-tests","title":"Running Tests","text":"<pre><code>pytest\n</code></pre> <p>Or to test a specific app/module:</p> <pre><code>pytest apps/utils/tests/test_slugs.py\n</code></pre>"},{"location":"getting-started/#updating-translations","title":"Updating Translations","text":"<pre><code>inv translations\n</code></pre>"},{"location":"getting-started/#linting-and-formatting","title":"Linting and Formatting","text":"<p>The project uses ruff for linting and formatting:</p> <pre><code>inv ruff\n</code></pre>"},{"location":"getting-started/#updating-requirements","title":"Updating Requirements","text":"<pre><code>inv requirements\n</code></pre> <p>To add a new requirement:</p> <pre><code>uv add &lt;package-name&gt;\n\n# for dev / prod dependencies\nuv add &lt;package-name&gt; --group [dev|prod]\n</code></pre>"}]}